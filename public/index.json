
[{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/decryption/","section":"Tags","summary":"","title":"Decryption","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/dpapi/","section":"Tags","summary":"","title":"DPAPI","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics","type":"tags"},{"content":" Table Of Contents # Introduction What kind of encrypted secrets (DPAPI blobs) are protected by DPAPI? How are these encrypted (e.g. which keys are used) and where are they stored? Encryption Mechanism Master Keys Master key structure (Windows XP and above) Storage locations The preferred file DPAPI domain backup key Is there a way to extract the values of those secrets? What tools can we use (focusing on Linux-based solutions)? Key Hierarchy and Decryption Flow RSA Machine (Private) Key decryption using impacket \u0026amp; SharpDPAPI Chrome stored passwords decryption Introduction # DPAPI (Data Protection API) is an integral component within the Windows OS designed to provide a simple, yet secure method of encrypting and decrypting data. This API is used by both system and third-party applications to protect sensitive information such as passwords, certificates, and other confidential data. This simplifies the process for developers, who don\u0026rsquo;t need to manage the protection of the encryption keys themselves. The encryption keys used by DPAPI are either tied to specific users or the local system, ensuring that the protected data remains secure and accessible only to authorized entities. What kind of encrypted secrets (DPAPI blobs) are protected by DPAPI? # Web Browsers: Cookies, usernames, passwords and auto-completion data stored by Chromium-based browsers like Chrome \u0026amp; Edge. Email Clients: Passwords and account information for email applications such as Outlook and Windows Mail. Windows Credential Manager: Passwords for shared folders, internal FTP accounts, network resources and other credentials stored in the Windows Credential Manager. Network Passwords: Wi-Fi passwords (both WEP/WPA and Enterprise PEAP versions). System Credentials: Credentials for Windows Vault, remote desktop connections (RDP), and other system-level secrets. Third-Party Applications: Passwords and credentials for applications like OpenVPN, iCloud, VMware Workstation, FortiClient, and Dropbox. Private Keys: Asymmetric private keys, certificates, and other encryption keys used by various applications. Windows Hello: Credentials used for Windows Hello (e.g., PIN, picture password, fingerprint). Other Applications: Personal data in applications like Skype, MSN Messenger, and more. How are these encrypted (e.g. which keys are used) and where are they stored? # Encryption Mechanism # When an application calls DPAPI to protect data, the following process occurs:\nKey Derivation # DPAPI generates a unique symmetric key for each piece of data to be encrypted. This key is derived using PBKDF2. The inputs to PBKDF2 include: The user\u0026rsquo;s password (for user data) or system secret (for system data) A randomly generated salt (typically 16 bytes) An iteration count (varies by Windows version, e.g., 8000 for Windows 10) Data Encryption # The derived symmetric key is used to encrypt the data. The encryption algorithm depends on the Windows version. OS Ciphering algorithm Hashing algorithm PBKDF2 iterations Windows 7 AES256 SHA512 5600 Windows 10 AES256 SHA512 8000 Windows 2000 RC4 SHA1 1 Windows Vista 3DES SHA1 24000 Windows XP 3DES SHA1 4000 DPAPI Blob Creation # DPAPI has two parts: the encryption/decryption keys, called DPAPI Master Keys and the encrypted data itself, called a DPAPI Blob or just blob. The blob is actually a binary, hex-formatted data structure with several fields.\nEncrypted data blob structure with the most important values highlighted: guidMasterKey – A GUID (globally unique identifier) representing the identifier of the Master Key that was used to encrypt this blob. This can be either a user’s Master Key or a local machine Master Key (see details below). pbSalt – A salt value that was generated during the encryption operation. This salt is coupled with the Master Key to encrypt the plaintext data. pbData – The actual encrypted data. As shown above, the blob structure contains a list of algorithms, format, and additional information related to how the data was encrypted. Master Keys # Each authority (details below) in a Windows operating system (OS) has its own DPAPI Master Key, which is used by any application running in the related authority context. The Master Key is stored to a file and encrypted at rest using one method or two methods – depending on the authority being used, and the Windows version.\nThere are two types of master keys:\nUser Master Keys: Unique to each user, derived from the user\u0026rsquo;s password and: For domain users: combination of user\u0026rsquo;s SID and NTLM hash For local users: combination of user\u0026rsquo;s SID and SHA1 hash of the password Notes: DPAPI User Master Keys cannot be decrypted offline unless the password or SHA1 hash of that password is known. On a running system, after typing in the password during login: the SHA1 password hash is being kept in the memory of the process “lsass.exe”, and that is what e.g., PowerShell uses to encrypt and decrypt User DPAPI Blobs. System Master Keys: Unique to each system, used for encrypting data accessible to all users on the system. These are encrypted with the Local Security Authority (LSA) DPAPI secret key. Master key structure (Windows XP and above) # Headers # Version: The Master Key version, commonly has a value of 2 GUID: Master Key’s identifier Flags: Includes settings of the Master Key. For example, one of the flags indicates whether Section 1: User-encrypted Master Key (see details below) is encrypted with the SHA1 or the NTLM hash of the user’s password. Sections lengths: Specifies the length of each section. Lengths can help to determine which sections are used to encrypt this Master Key. Body (Sections) # Sections contain the actual Master Key (the one that is used to encrypt and decrypt data blobs) in an encrypted form.\nSection 1: User-encrypted Master Key: Stores the Master Key in a user-encrypted form, where the phrase used to encrypt it is the user’s password or DPAPI_SYSTEM registry key (depending on the authority). Section 2: Local Encryption Key (legacy): This legacy section, used in Windows 2000, stores a local encryption key to decrypt a local backup of the Master Key. This section is not used from later Windows versions but still contains data. Section 3: Credential History: Stores a GUID that points to a link stored in the user’s CREDHIST file. The CREDHIST (Credential History) file maintains a chain of a local user password history, in an encrypted form. As local users may change their passwords, DPAPI requires the ability to read the password that was used to encrypt a Master Key created in the past. Section 4: Domain Backup: Stores another Master Key copy that was encrypted with the domain backup key. The domain backup key is an RSA key pair in which the private and public keys are stored in the Domain Controller (DC), and the public key is also distributed to every user’s profile, enabling each user to encrypt their own Master Key. This does not back up a copy of the Master Key to the DC, but provides the ability to recover it if the domain user’s password is forgotten. As there might be more than one domain backup key, this section includes a slot for the GUID of this key. Storage locations # DPAPI blobs (encrypted secrets) are typically stored in: C:\\Users\\\u0026lt;USER\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\ C:\\Users\\\u0026lt;USER\u0026gt;\\AppData\\Roaming\\Microsoft\\Credentials\\ Application-specific locations (e.g., Chrome user data directory) User Client Certificates Public Key Certificates: %AppData%\\Microsoft\\SystemCertificates\\My\\Certificates\\ Private Keys: C:\\Users\\\u0026lt;USER\u0026gt;\\AppData\\Roaming\\Microsoft\\Crypto\\RSA\\\u0026lt;USER_SID\u0026gt;\\ System Client Certificates Public Key Certificates: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\SystemCertificates Private Keys: \u0026lt;DISK\u0026gt;\\ProgramData\\Microsoft\\Crypto\\RSA\\MachineKeys\\ Master Keys (used by 4 different authorities): Local Machine (System Master Keys) Master Key location: C:\\Windows\\System32\\Microsoft\\Protect\\S-1-5-18\\ Additional information: This Master Key is used when the application scopes the data encryption to use the local machine. The CRYPTPROTECT_LOCAL_MACHINE flag is set. Local Users Master Key location: C:\\Users\\\u0026lt;USER\u0026gt;\\AppData\\Roaming\\Microsoft\\Protect\\\u0026lt;USER_SID\u0026gt; Additional information: Older Master Keys of local users point to the relevant link within the CREDHIST file, as the key might be encrypted with an older password. System Users Master Key location: C:\\Windows\\System32\\Microsoft\\Protect\\S-1-5-18\\\u0026lt;USER\u0026gt; Common data blobs paths: C:\\Windows\\System32\\config\\systemprofile\\AppData\\ C:\\Windows\\System32\\config\\LocalService\\AppData\\ C:\\Windows\\System32\\config\\NetworkService\\AppData\\ Additional information: This Master Key is used when the encryption is scoped to the user, but the process is running with either System, LocalService or NetworkService users. Domain Users Master Key location: C:\\Users\\\u0026lt;USER\u0026gt;\\AppData\\Microsoft\\Protect\\\u0026lt;USER_SID\u0026gt; Additional information: Unlike local users, all domain users’ Master Keys are always encrypted with their latest password, because domain users do not maintain a CREDHIST file. The preferred file # Inside Master Key’s path, we may encounter more than one Master Key file. This is because Master Keys are set to expire approximately 90 days after creation. DPAPI uses the ‘Preferred’ file, located in the same folder, to keep track of the currently used (preferred) Master Key and its expiration date.\nThe image below shows an example of the files that may be located in a domain user’s Master Key path: DPAPI domain backup key # The DPAPI Domain Backup key is a unique RSA key pair that is generated only once, when the domain is created.\nThe backup key is stored in the Active Directory as an LSA secret object, and is replicated across all Domain Controllers in the same domain. Members of the Domain Administrators group have the required privileges to read this key, and tools like Mimikatz and SharpDPAPI can aid in automating the dump process and conversion of the key to a PVK format. The PVK can be later used to decrypt a Master Key of any user in the domain.\nAs previously mentioned, it\u0026rsquo;s stored within the Active Directory database therefore doesn\u0026rsquo;t have a traditional file system path. We can locate it through the DSA.msc (Directory Services Administrative) tool, under the \u0026lsquo;System\u0026rsquo; container: Is there a way to extract the values of those secrets? What tools can we use (focusing on Linux-based solutions)? # Key Hierarchy and Decryption Flow # BootKey (SysKey) A 128-bit (16-byte) value derived from the SYSTEM registry hive is unique to each Windows system. Used to decrypt the LSA secrets stored in the SECURITY hive. The BootKey is derived from several values in the SYSTEM hive, such as HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ values, combined and hashed to form the BootKey. LSA Key Stored in the SECURITY hive, encrypted with the BootKey. Used to decrypt specific LSA secrets, including DPAPI system-related secrets. Once the BootKey is obtained, it decrypts the LSA key. LSA Secrets Encrypted with the LSA Key and stored in the SECURITY hive (SECURITY\\Policy\\Secrets). The following secrets can be found, among others: DPAPI_SYSTEM which contains the DPAPI machine and user key for local DPAPI. NL$KM which contains an encryption key for the MsCache also stored in the SECURITY hive (SECURITY\\Cache). MsCache are the latest hashed credentials for domain users. $MACHINE.ACC contains the computer account credentials when joined to an Active Directory domain. DEFAULTPASSWORD is the default password when the auto-logon feature is configured. Keys starting with _SC_ corresponds to non-interactive service account credentials that could be local or for a domain user. Decrypted using the LSA Key. DPAPI_SYSTEM Secret One of the LSA secrets, specifically used for DPAPI operations. Contains the master key necessary to decrypt system-wide DPAPI master keys. Decrypted using the LSA Key. System Master Keys Stored under \u0026lt;DISK\u0026gt;\\Windows\\System32\\Microsoft\\Protect\\S-1-5-18\\ Each master key has a GUID and is encrypted using the DPAPI_SYSTEM secret. Decrypted using the DPAPI_SYSTEM secret. RSA Machine (Private) Keys Located in \u0026lt;DISK\u0026gt;\\ProgramData\\Microsoft\\Crypto\\RSA\\MachineKeys\\ Used by the Cryptographic API (CAPI) to encrypt and decrypt System Client Certificates. Decrypted using a specific System Master Key from the available ones. Crypto Keys (CNG) Found in \u0026lt;DISK\u0026gt;\\ProgramData\\Microsoft\\Crypto\\Keys\\ Used by Cryptography API: Next Generation (CNG) for cryptographic operations. Decrypted using a specific System Master Key. User Data (e.g., DPAPI-protected blobs, certificates) Finally, the decrypted System Master Keys or the RSA Machine/Private Keys can be used to decrypt DPAPI-protected data such as user credentials, certificates, or other sensitive information. RSA Machine (Private) Key decryption using impacket \u0026amp; SharpDPAPI # Extract SYSTEM and SECURITY Registry Hives cp \u0026lt;DISK\u0026gt;/Windows/System32/config/SYSTEM \u0026lt;WORKING_DIR\u0026gt;/DPAPI_SYSTEM.hive cp \u0026lt;DISK\u0026gt;/Windows/System32/config/SECURITY \u0026lt;WORKING_DIR\u0026gt;/DPAPI_SECURITY.hive Extract System Master Keys cp -r \u0026lt;DISK\u0026gt;/Windows/System32/Microsoft/Protect/S-1-5-18/ \u0026lt;WORKING_DIR\u0026gt;/SYSTEM_MKs_S-1-5-18 Decrypt each System Master Key using impacket’s dpapi.py and the above Registry hives python3 impacket/dpapi.py masterkey -file SYSTEM_MKs_S-1-5-18/\u0026lt;SYSTEM_MK_GUID\u0026gt; -system DPAPI_SYSTEM.hive -security DPAPI_SECURITY.hive Indicative output: $ dpapi.py masterkey -file SYSTEM_MKs_S-1-5-18/e68e86c9-c3c3-4958-b923-7b2977 -system DPAPI_SYSTEM.hive -security DPAPI_SECURITY.hive Impacket v0.11.0 - Copyright 2023 Fortra [MASTERKEYFILE] Version : 2 (2) Guid : e68e86c9-c3c3-4958-b923-7b2977 Flags : 6 (6) Policy : 0 (0) MasterKeyLen: 000000b0 (176) BackupKeyLen: 00000090 (144) CredHistLen : 00000014 (20) DomainKeyLen: 00000000 (0) [*] Target system bootKey: 0x283901db1a53ff37fd9b1a7d10 [*] Dumping LSA Secrets [*] $MACHINE.ACC [*] DefaultPassword [*] DPAPI_SYSTEM [*] NL$KM Decrypted key with MachineKey Decrypted key: 0xf65237cada605ce19326184cafe30973f47d0fd7d8f37a0a53d8 Get the SHA1 hash of the Decrypted System Master Key echo -n \u0026quot;\u0026lt;decrypted_system_mk\u0026gt;\u0026quot; | xxd -r -p | sha1sum Example: echo -n \u0026quot;f65237cada605ce19326184cafe30973f47d0fd7d8f37a0a53d8\u0026quot; | xxd -r -p | sha1sum Extract the Private Keys you want to decrypt Cryptographic API (CAPI) Extract RSA Machine keys cp -r \u0026lt;DISK\u0026gt;/ProgramData/Microsoft/Crypto/RSA/MachineKeys/. \u0026lt;WORKING_DIR\u0026gt;/RSA_MACHINE_KEYS/ Cryptography API: Next Generation (CNG) Extract Crypto/Keys cp -r \u0026lt;DISK\u0026gt;/ProgramData/Microsoft/Crypto/Keys/. \u0026lt;WORKING_DIR\u0026gt;/CRYPTO_KEYS/ Install wine in order to run SharpDPAPI (compiled binary here) $ apt install wine $ dpkg --add-architecture i386 $ apt install wine32 $ wine msiexec /i wine-mono-[version].msi Run SharpDPAPI.exe with certificates action and only the target file as input wine SharpDPAPI.exe certificates /target:\u0026lt;RSA_MACHINE_KEY\u0026gt; Example below, notice the masterkey needed: {\u0026lt;SYSTEM_MASTERKEY_GUID\u0026gt;} output $ wine SharpDPAPI.exe certificates /target:a1006ebd40f83685cc94962e0dd973d9_62526833-1703-428f-84dd 0009:err:mscoree:LoadLibraryShim error reading registry key for installroot __ _ _ _ ___ (_ |_ _. ._ ._ | \\ |_) /\\ |_) | __) | | (_| | |_) |_/ | /--\\ | _|_ | v1.11.2 [*] Action: Certificate Triage [*] Target Certificate File: a1006ebd40f83685cc94962e0dd973d9_62526833-1703-428f-84dd [!] a1006ebd40f83685cc94962e0dd973d9_62526833-1703-428f-84dd masterkey needed: {e68e86c9-c3c3-4958-b923-7b2977} [*] Hint: openssl pkcs12 -in cert.pem -keyex -CSP \u0026#34;Microsoft Enhanced Cryptographic Provider v1.0\u0026#34; -export -out cert.pfx SharpDPAPI completed in 00:00:00.1879740 Run SharpDPAPI.exe with certificates action and the needed System MK from above wine SharpDPAPI.exe certificates /target:\u0026lt;RSA_MACHINE_KEY\u0026gt; /showall \u0026quot;{\u0026lt;SYSTEM_MK_GUID\u0026gt;}:\u0026lt;DECRYPTED_SYSTEM_MK_SHA1_HASH\u0026gt;\u0026quot; Chrome stored passwords decryption # ","date":"20 October 2024","externalUrl":null,"permalink":"/posts/tech/dpapi-blobs/","section":"Posts","summary":"","title":"Offline Decryption of DPAPI blobs","type":"posts"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/categories/tech/","section":"Categories","summary":"","title":"Tech","type":"categories"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/arm64/","section":"Tags","summary":"","title":"Arm64","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/kali/","section":"Tags","summary":"","title":"Kali","type":"tags"},{"content":"This guide is based on macOS 14.4, UTM 4.4.6 and Kali Linux 2024.1-arm64.\nFirst Post! UTM, a macOS-specific virtualization tool, offers cybersecurity enthusiasts a solution for running diverse operating systems like Kali Linux on Apple Silicon MacBooks, filling the gap left by incompatible traditional options such as VirtualBox.\nStep 1: Install UTM # Download the .dmg file from https://mac.getutm.app/ and install it.\nStep 2: Get Kali Linux Installer Image for ARM # Go to https://www.kali.org/get-kali/#kali-installer-images to download the latest official installer image. Make sure to choose “Apple Silicon (ARM64)”. You can choose offline or online installer image per your needs, but the offline image is recommended for simplicity.\nAfter downloading, you should have an .iso file on your disk.\nStep 3: Create A VM Using the Image # Tips: During setup, UTM might ask for system permissions multiple times; please grant them. Most VM settings can be adjusted post-creation, so initial setup needn’t be time-consuming.\nOpen UTM. Click the “+” button to create a new VM. Then select “Virtualize”. Select “Other”. Click “Browse” to select the .iso file you just downloaded, and then click “Continue”. Leave Memory and CPU settings as default. Click “Continue”. Decide the disk space for Kali Linux. Kali’s docs recommends ≥ 20GB on the higher end. Then click “Continue”. Set up a shared directory path if needed. This allows sharing files between the host and the virtual client. Let’s skip it for now and click “Continue”. Tips: To make directory-sharing work, you need to install some software later in the virtual machine guest, which will be mentioned later.\nReview the summary, choose a nickname for this VM, and click “Save”. Now your should see the new virtual machine on the left. Step 4: Boot and Install Kali Linux # Tips: The following sub-steps are complex and require careful attention.\nRight click the new VM and select “Edit”. Due to a bug on UTM, we need to install Kali in console-only mode. Firstly, in the devices list, right click the current Display and select “Remove”. Then select “+ New…” and add a “Serial” device. This will give us a console GUI during the the boot. Remove the existing “Display” device\nAdd a new “Serial” device\nAfter the “Serial” device is added, click “Save”. Now run the VM. It should open a console window, where we will proceed with the installation of Kali Linux. Use your keyboard navigate within this window (e.g, arrow keys to move between options and Enter key to select). Select “Install”. Follow the instructions to set up language, region, timezone, etc. You can customize your hostname, username, and password as needed. For optional settings like “domain” and “full name”, you can leave them blank. When you reach the “Partition disks” step, select “Guided — use entire disk” → “Virtual disk 1” → “All files in one partition” → “Finish partitioning and write changes to disk” → “Yes”. In the “Software Selection” step, select the default option, “Xfce”. The installation of software packages will take approximately 10 minutes to finish. DO NOT perform any actions after it finishes; instead, carefully follow the next sub-step. When you reach the “Finish the Installation” step, DO NOT select “Continue”. Instead, return to UTM’s main window, select your VM on the left, and then scroll down to the bottom on the right side. Select “CD/DVD” and click “Clear”. This action mimics ejecting the installation drive (the .iso file), ensuring that the next reboot will load the installed system instead of booting from the installation drive again. 11. Right click your VM and select “Stop”.\nEdit your VM to remove the “Serial” device. Then, add a new “Display” device, selecting the “virtio-gpu-pci” option. Then save the settings and run the machine. Log in using your username and password. Your Kali Linux VM is now up and running! However, a few additional setups are required to further enhance the user experience. Step 5: Enable Dynamic Resolution \u0026amp; Clipboard Sharing # Dynamic resolution is a feature that enables the VM’s display resolution to automatically adjust to match the size of the UTM window as it changes. Clipboard sharing facilitates copying and pasting to and from the VM. To support these two features, we will need to install a Linux package called spice-vdagent.\nLaunch the virtual machine (VM) and log into Kali Linux. Open the “Terminal Emulator” application. Enter the following commands: sudo apt install spice-vdagent Once the installation is complete, restart the VM.\n**spice-vdagent**should now be running as a systemd service in the background. Test the setup by copying and pasting to or from the VM; it should function seamlessly.\nHowever, you may encounter issues with dynamic resolution not functioning. Now you can diagnose using below command:\nsudo systemctl status spice-vdagent If you notice error messages such as invalid message size for VDAgentMonitorsConfig, this indicates a known bug in UTM. To work around this issue, you can manually trigger a resolution adjustment by executing the following command: xrandr --output Virtual-1 --auto\nTo avoid the hassle of manually running the command every time you change the window size, you can set up a background service to automate the process. Use the below commands, and remember to replace YOUR_USER_NAME in the script with your actual username: # 1. Create a script to watch error messages from spice-vdagentd and execute the fix command sudo tee /usr/local/bin/auto_adjust_resolution.sh \u0026gt; /dev/null \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; #!/bin/bash journalctl -fu spice-vdagentd | grep --line-buffered \u0026#34;invalid message size\u0026#34; | while read line ; do xrandr --output Virtual-1 --auto done EOF # 2. Make the script executable sudo chmod +x /usr/local/bin/auto_adjust_resolution.sh # 3. Create a systemd service to keep the script running in the background sudo tee /etc/systemd/system/auto_adjust_resolution.service \u0026gt; /dev/null \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; [Unit] Description=Monitor spice-vdagentd logs for \u0026#34;invalid message size\u0026#34; and adjust display After=network.target [Service] Type=simple User=YOUR_USER_NAME Environment=\u0026#34;DISPLAY=:0\u0026#34; ExecStart=/usr/local/bin/auto_adjust_resolution.sh Restart=on-failure [Install] WantedBy=multi-user.target EOF # 4. Register and start the service sudo systemctl daemon-reload sudo systemctl enable auto_adjust_resolution.service sudo systemctl start auto_adjust_resolution.service # 5. Check if the service is up and running sudo systemctl status auto_adjust_resolution.service To test the setup, resize the UTM’s VM window. The resolution inside the VM should adjust promptly to match the window size.\nStep 6: Enable Directory Sharing # Directory sharing facilitates the sharing of a directory from the host system with the virtual machine (VM). This functionality depends on the Linux package spice-webdavd. Follow the steps below to set it up: Open the Terminal in Kali Linux and run the following command to install spice-webdavd:\nsudo apt install spice-webdavd Stop the VM to access its “Sharing” configuration section. Ensure the “Directory Share Mode” is set to “SPICE WebDAV”. Click “Browse” to select the directory on the host system that you wish to share with the VM. And after that, click “Save” to apply the changes. Now the URL http://localhost:9843 is pointing to the SPICE WebDAV server running on the VM. You can access the files using a web browser or a WebDAV client within the VM. Step 7: Congratulations 🎉 # ","date":"5 October 2024","externalUrl":null,"permalink":"/posts/tech/kali-vm-arm64/","section":"Posts","summary":"","title":"Kali Linux on Apple Silicon [2024]","type":"posts"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/macos/","section":"Tags","summary":"","title":"MacOS","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/utm/","section":"Tags","summary":"","title":"UTM","type":"tags"},{"content":"","date":"5 October 2024","externalUrl":null,"permalink":"/tags/virtual-machines/","section":"Tags","summary":"","title":"Virtual Machines","type":"tags"},{"content":" Interests Scripting (Bash/Python) Dev(Sec)Ops CTI (Cyber Threat Intelligence) OSINT (Open-Source Intelligence) Values Attention to detail Adaptability Proper Documentation \u0026amp; SOPs Hobbies FPV Drones Sim Racing Graphic Design ","date":"4 October 2024","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"About","type":"page"},{"content":"","date":"4 October 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2 October 2024","externalUrl":null,"permalink":"/tags/assignment/","section":"Tags","summary":"","title":"Assignment","type":"tags"},{"content":"","date":"2 October 2024","externalUrl":null,"permalink":"/tags/m110/","section":"Tags","summary":"","title":"M110","type":"tags"},{"content":"","date":"2 October 2024","externalUrl":null,"permalink":"/categories/placeholder/","section":"Categories","summary":"","title":"Placeholder","type":"categories"},{"content":" Download as PDF Experience Company Link Role Dates Location GRNET / ΕΔΥΤΕ IT Security Engineer 2024 - Present Remote Athens, GR NOC Support 2022 - 2024 Remote Athens, GR University of Athens Teaching Assistant\n@ Data Security \u0026 Privacy 2023 - 2024 Onsite Athens, GR Education University Link Degree Dates University of Athens MSc, Computer Systems 2024 - Present BSc, Business Administration 2019-2024 AUEB | Coding Factory Software Engineering Bootcamp (8 months) 2023 Certifications Show Credentials Organization Link Certification Date ISC2 CC (Certified in Cybersecurity) 2024 TU Delft Unix Tools: Data, Software and Production Engineering 2023 arcX Cyber Threat Intelligence 101 2023 linq Cybersecurity - Penetration Testing 2023 Google Web Analytics Advanced 2023 ","date":"2 October 2024","externalUrl":null,"permalink":"/resume/","section":"","summary":"","title":"Resume","type":"page"},{"content":"","date":"2 October 2024","externalUrl":null,"permalink":"/categories/university/","section":"Categories","summary":"","title":"University","type":"categories"},{"content":"\n","date":"2 October 2024","externalUrl":null,"permalink":"/posts/university/test-post/","section":"Posts","summary":"","title":"University Post","type":"posts"},{"content":" p3rception/GlassFox // transluscent firefoxcss theme CSS 18 1 p3rception/Indigo-zed // theme for zed - 2k downloads null 3 4 p3rception/dotfiles // terminal .config files Shell 23 1 p3rception/PyNaut // python port scanner Python 0 0 p3rception/NeoNote // Task-management Django App Python 0 0 p3rception/Thunderbird-Sieve-Converter Converts Thunderbird email filter rules to Sieve rules Python 0 0 ","date":"13 June 2022","externalUrl":null,"permalink":"/projects/","section":"","summary":"","title":"Projects","type":"page"},{"content":"","date":"10 July 1856","externalUrl":null,"permalink":"/categories/other/","section":"Categories","summary":"","title":"Other","type":"categories"},{"content":"\n","date":"10 July 1856","externalUrl":null,"permalink":"/posts/other/test-post/","section":"Posts","summary":"","title":"Other Post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]